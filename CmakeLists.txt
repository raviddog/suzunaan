cmake_minimum_required (VERSION 3.16)
project (thszn)

file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(OUT_DIR ${CMAKE_BINARY_DIR}/bin)
set(IN_RES_DIR ./res)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ./bin)
#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ./bin)

add_library(engine STATIC engine/engine_gl.cpp engine/engine.cpp engine/glad.c engine/stb_image.cpp)
target_include_directories(engine PUBLIC ./engine)
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_link_libraries(engine -lmingw32 -lSDL2main -lSDL2)
endif()

add_library(game STATIC source/content/menu.cpp source/content/teststage.cpp source/content/player.cpp source/content/bullet.cpp source/content/enemy.cpp source/content/script.cpp)
target_include_directories(game PUBLIC . ./engine ./source/content)
set_property(TARGET game PROPERTY CXX_STANDARD 17)
set_property(TARGET game PROPERTY CXX_STANDARD_REQUIRED ON)

add_executable(thszn source/main.cpp source/game.cpp)
target_include_directories(thszn PUBLIC .)
target_link_libraries(thszn engine game)
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_link_libraries(thszn -Wl,-subsystem,console)
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT thszn)
    set_property(TARGET thszn PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()

#target_link_libraries(thszn -lmingw32 -lSDL2main -lSDL2 -lSDL2_ttf -lSDL2_mixer)

add_custom_command(TARGET thszn PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/res" $<TARGET_FILE_DIR:thszn>)