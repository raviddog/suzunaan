id:trigger:instructions

bullets start on frame 0, so frame 0 instructions can be used to set initial properties
you can also skip this and implement them in enemy scripts if you want, in order to make the bullet script more flexible

id is an unsigned integer, so it must be non-negative
it'll probably work if you use negatives but dont
the id is optional but some recurring triggers need it in order to stop their instructions
instructions aren't restricted to one per line, or one line per trigger,
    but your id and trigger must be on the same line, separated by colons.

stage
==============

only has frame triggers
enemy(int id, int type, float x, float y)

enemy
==============

id = -1 for spawner type

triggers
-------------------

# implemented

# not implemented

init()
a trigger that is called just before the enemy is activated
you can use it to set things like initial position, hp, etc
technically you can chain instructions off of this one

none()
trigger by id only
single run instrucction

noneCont()
runs until stopped

frame(int frame)
happens on specified frame
single run instruction

frameCont(int frame)
run every frame starting at specified frame
cancellable by id

interval(int frames)
run every x frames
triggered by id

intervalStart(int start, int frames)
starting from specified frame, run every x frames
cancellable by id
it is recommended you provide an instruction id for this trigger, even if you aren't using it



instructions
--------------------

# implemented

setHP(int)
set hp

speed(float)
set speed

angle(float)
set angle

accel(float)
set accel

bullet(uint type, uint scriptID, float speed, float angle)
fire bullet from location at specified speed/angle
if scriptID = 0, no script is attached

# not implemented

bulletXY(uint type, uint scriptID, float speed, float angle, float x_offset, float y_offset)
spawns a bullet offset to this enemy's current position with specified speed/angle
if scriptID = 0, no script is attached

bulletAD(uint type, uint scriptID, float speed, float angle, float angle_spawn, float dist_spawn)
spawns a bullet offset to this enemy's current position by specified distance at specified angle
if scriptID = 0, no script is attached




bullets
==============

triggers
----------------

# implemented

frame(int frame)
happens on specified frame
single run instruction

none()
trigger by id only
same as not having a normal trigger
single run instruction

noneCont()
trigger by id only
same as not having a normal trigger
runs until stopped

frameCont(int frame)
run every frame starting at specified frame
cancellable by id

interval(int frames)
run every x frames
triggered by id
it is recommended you provide an instruction id for this trigger, even if you aren't using it

intervalStart(int start, int frames)
starting from specified frame, run every x frames
cancellable by id
it is recommended you provide an instruction id for this trigger, even if you aren't using it

distToPlayer(float distance)
activates when bullet is less than a certain distance from the player
single run instruction

# not implemented

random_interval(int min, int max)
run randomly, interval is between specified frames

random_frameCont(int min, int max)
same as frameCont but start frame is random between specified frames, inclusive

random_frame(int min, int max)
happens on a random frame between the specified frames, inclusive

betweenFrame(int frameStart, int frameEnd)
run every frame starting at specified frame and ending at specified frame
the function is called on both the start frame and the end frame
implemented via creating a stop command on the specified frame

distFromPlayer(float distance)
activates when bullet is more than a certain distance from the player
single run instruction


instructions
----------------

# implemented

speed(float);
set speed

accel(float);
set acceleration

angle(float);
set bullet angle

angle_change(float);
set bullet angle relative to current angle 

type_set(int);
change the bullet type to the specified value

type_set_relative(int);
change the bullet type by a relative amount

start(int id);
run instruction with id
this doesn't make any guarantees about whether the instruction is single run or not
it only adds it to back of the the active instruction queue, which means it does run on the same frame

stop(int id);
cancel instruction with specified id
don't make an instruction cancel itself, or things will break

frameTrigger(int id, int frame);
create new frame trigger for specified instruction id
mostly used internally by functions that stop automatically

frameTriggerOffset(int id, int frame);
same as frameTrigger, but frame is an offset to the current instruction frame
used internally by the interval triggers

stopInterval(int id);
same as stop but specifically for interval functions

angle_atPlayer();
change angle to aim at player's position

# not implemented

speedTo(float speed, int frames);
speed goes to target over specified number of frames

move(float angle, float speed);
set movement direction and speed.

argument functions
------------------------

these functions can be used as instruction arguments instead of raw numbers
i feel like i should implement this stuff but i REALLY dont want to

# not implemented

float playerAngle(float)
returns the angle from the bullet to the player, plus the specified amount

int rand(int min, int max)
returns a random number between min and max

float randf(float min, float max)
returns a random float between min and max